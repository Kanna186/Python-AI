class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[] for _ in range(vertices)]
    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)
    def is_safe(self, v, color, c):
        return all(color[i] != c for i in self.graph[v])
    def graph_coloring_util(self, m, color, v):
        if v == self.V:
            return True
        for c in range(1, m + 1):
            if self.is_safe(v, color, c):
                color[v] = c
                if self.graph_coloring_util(m, color, v + 1):
                    return True
                color[v] = 0
        return False
    def graph_coloring(self, m):
        color = [0] * self.V
        return color if self.graph_coloring_util(m, color, 0) else None
if __name__ == "__main__":
    num_vertices = int(input("Enter the number of vertices: "))
    g = Graph(num_vertices)
    num_edges = int(input("Enter the number of edges: "))
    for _ in range(num_edges):
        u, v = map(int, input("Enter edge (u v): ").split())
        g.add_edge(u, v)
    m = int(input("Enter the number of colors: "))
    result = g.graph_coloring(m)
    if result:
        print("Coloring of the graph:", result)
    else:
        print("No solution exists")